apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: photodb
  name: photodb
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: photodb
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: photodb
    spec:
      containers:
      - image: djjudas21/photodb:0.1.1
        imagePullPolicy: IfNotPresent
        name: photodb
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: user
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: DB_HOST
          value: postgres-service
        - name: DB_NAME
          value: photodb
        - name: DB_PORT
          value: '5432'
        - name: DB_ENGINE
          value: django.db.backends.postgresql
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: photodb
  name: photodb
spec:
  ports:
  - port: 8000
    protocol: TCP
  selector:
    app: photodb
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    # add an annotation indicating the issuer to use.
    #cert-manager.io/cluster-issuer: letsencrypt-prod
  name: photodb
spec:
  rules:
  - host: myingress.com
    http:
      paths:
      - backend:
          serviceName: photodb
          servicePort: 8000
        path: /
  #tls: # < placing a host in the TLS config will indicate a cert should be created
  #- hosts:
   # - myingress.com
    #secretName: photodb-ingress-cert # < cert-manager will store the created certificate in this secret.
