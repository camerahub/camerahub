# Generated by Django 2.1.10 on 2019-08-13 10:55

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('schema', '0004_auto_20190812_2314'),
    ]

    operations = [
        migrations.CreateModel(
            name='BulkFilm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_date', models.DateField(verbose_name='Purchase date of this bulk roll')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Purchase cost of this bulk roll')),
                ('source', models.CharField(max_length=45, verbose_name='Place where this bulk roll was bought from')),
                ('batch', models.CharField(max_length=45, verbose_name='Batch code of this bulk roll')),
                ('expiry', models.DateField(verbose_name='Expiry date of this bulk roll')),
            ],
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('code', models.CharField(max_length=6, primary_key=True, serialize=False, verbose_name='Condition shortcode (e.g. EXC)')),
                ('name', models.CharField(max_length=45, verbose_name='Full name of condition (e.g. Excellent)')),
                ('min_rating', models.IntegerField(verbose_name='The lowest percentage rating that encompasses this condition')),
                ('max_rating', models.IntegerField(verbose_name='The highest percentage rating that encompasses this condition')),
                ('description', models.CharField(max_length=300, verbose_name='Longer description of condition')),
            ],
        ),
        migrations.CreateModel(
            name='ExposureProgram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45, verbose_name='Name of exposure program as defined by EXIF tag ExposureProgram')),
            ],
        ),
        migrations.CreateModel(
            name='FilmStock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45, verbose_name='Name of the filmstock')),
                ('iso', models.IntegerField(verbose_name='Nominal ISO speed of the film')),
                ('colour', models.BooleanField(verbose_name='Whether the film is colour')),
                ('panchromatic', models.BooleanField(verbose_name='Whether this film is panchromatic')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=45, verbose_name='Filter type (e.g. Red, CPL, UV)')),
                ('thread', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Diameter of screw thread in mm')),
                ('attenuation', models.DecimalField(decimal_places=1, max_digits=3, verbose_name='Attenuation of this filter in decimal stops')),
                ('qty', models.IntegerField(verbose_name='Quantity of these filters available')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='FilterAdapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('camera_thread', models.DecimalField(decimal_places=1, max_digits=3, verbose_name='Diameter of camera-facing screw thread in mm')),
                ('filter_thread', models.DecimalField(decimal_places=1, max_digits=3, verbose_name='Diameter of filter-facing screw thread in mm')),
            ],
        ),
        migrations.CreateModel(
            name='Flash',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=45, verbose_name='Model name/number of the flash')),
                ('guide_number', models.IntegerField(verbose_name='Guide number of the flash')),
                ('gn_info', models.CharField(max_length=45, verbose_name='Extra freeform info about how the guide number was measured')),
                ('battery_powered', models.BooleanField(verbose_name='Whether this flash takes batteries')),
                ('pc_sync', models.BooleanField(verbose_name='Whether the flash has a PC sync socket')),
                ('hot_shoe', models.BooleanField(verbose_name='Whether the flash has a hot shoe connection')),
                ('light_stand', models.BooleanField(verbose_name='Whether the flash can be used on a light stand')),
                ('battery_qty', models.IntegerField(verbose_name='Quantity of batteries needed in this flash')),
                ('manual_control', models.BooleanField(verbose_name='Whether this flash offers manual power control')),
                ('swivel_head', models.BooleanField(verbose_name='Whether this flash has a horizontal swivel head')),
                ('tilt_head', models.BooleanField(verbose_name='Whether this flash has a vertical tilt head')),
                ('zoom', models.BooleanField(verbose_name='Whether this flash can zoom')),
                ('dslr_safe', models.BooleanField(verbose_name='Whether this flash is safe to use with a digital camera')),
                ('ttl', models.BooleanField(verbose_name='Whether this flash supports TTL metering')),
                ('trigger_voltage', models.DecimalField(decimal_places=1, max_digits=5, verbose_name='Trigger voltage of the flash, in Volts')),
                ('own', models.BooleanField(verbose_name='Whether we currently own this flash')),
                ('acquired', models.DateField(verbose_name='Date this flash was acquired')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Purchase cost of this flash')),
                ('battery_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Battery')),
            ],
        ),
        migrations.CreateModel(
            name='FlashProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45, verbose_name='Name of the flash protocol')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='FocusType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45, verbose_name='Name of focus type')),
            ],
        ),
        migrations.CreateModel(
            name='Format',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.CharField(max_length=45, verbose_name='The name of this film/sensor format')),
                ('digital', models.BooleanField(verbose_name='Whether this is a digital format')),
            ],
        ),
        migrations.CreateModel(
            name='LightMeter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=45, verbose_name='Model name or number of the light meter')),
                ('reflected', models.BooleanField(verbose_name='Whether the meter is capable of reflected-light metering')),
                ('incident', models.BooleanField(verbose_name='Whether the meter is capable of incident-light metering')),
                ('flash', models.BooleanField(verbose_name='Whether the meter is capable of flash metering')),
                ('spot', models.BooleanField(verbose_name='Whether the meter is capable of spot metering')),
                ('min_asa', models.IntegerField(verbose_name='Minimum ISO/ASA that this meter is capable of handling')),
                ('max_asa', models.IntegerField(verbose_name='Maximum ISO/ASA that this meter is capable of handling')),
                ('min_lv', models.IntegerField(verbose_name='Minimum light value (LV/EV) that this meter is capable of handling')),
                ('max_lv', models.IntegerField(verbose_name='Maximum light value (LV/EV) that this meter is capable of handling')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='MeteringMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45, verbose_name='Name of metering mode as defined by EXIF tag MeteringMode')),
            ],
        ),
        migrations.CreateModel(
            name='MeteringType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45, verbose_name='Name of the metering technology (e.g. Selenium)')),
            ],
        ),
        migrations.CreateModel(
            name='Mount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mount', models.CharField(max_length=45, verbose_name='Name of this lens mount (e.g. Canon FD)')),
                ('fixed', models.BooleanField(verbose_name='Whether this is a fixed (non-interchangable) lens mount')),
                ('shutter_in_lens', models.BooleanField(verbose_name='Whether this lens mount system incorporates the shutter models.IntegerFieldo the lens')),
                ('type', models.CharField(max_length=25, verbose_name='The physical mount type of this lens mount (e.g. Screw, Bayonet, etc)')),
                ('purpose', models.CharField(max_length=25, verbose_name='The intended purpose of this lens mount (e.g. camera, enlarger, projector)')),
                ('notes', models.CharField(max_length=100, verbose_name='Freeform notes field')),
                ('digital_only', models.BooleanField(verbose_name='Whether this mount is models.intended only for digital cameras')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='NegativeSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45, verbose_name='Common name of the negative size (e.g. 35mm, 6x7, etc)')),
                ('width', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Width of the negative size in mm')),
                ('height', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Height of the negative size in mm')),
                ('crop_factor', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Crop factor of this negative size')),
                ('area', models.IntegerField(verbose_name='Area of this negative size in sq. mm')),
                ('aspect_ratio', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Aspect ratio of this negative size, expressed as a single decimal (e.g. 3:2 is expressed as 1.5)')),
            ],
        ),
        migrations.CreateModel(
            name='PaperStock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45, verbose_name='Name of this paper stock')),
                ('resin_coated', models.BooleanField(verbose_name='Whether the paper is resin-coated')),
                ('tonable', models.BooleanField(verbose_name='Whether this paper accepts chemical toning')),
                ('colour', models.BooleanField(verbose_name='Whether this is a colour paper')),
                ('finish', models.CharField(max_length=25, verbose_name='The finish of the paper surface')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45, verbose_name='Name of the photographer')),
            ],
        ),
        migrations.CreateModel(
            name='Process',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Name of this developmenmt process (e.g. C-41, E-6)')),
                ('colour', models.BooleanField(verbose_name='Whether this is a colour process')),
                ('positive', models.BooleanField(verbose_name='Whether this is a positive/reversal process')),
            ],
        ),
        migrations.CreateModel(
            name='Projector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=45, verbose_name='Model name of this projector')),
                ('own', models.BooleanField(verbose_name='Whether we currently own this projector')),
                ('cine', models.BooleanField(verbose_name='Whether this is a cine (movie) projector')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer')),
                ('mount', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Mount')),
                ('negative_size', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.NegativeSize')),
            ],
        ),
        migrations.CreateModel(
            name='ShutterSpeed',
            fields=[
                ('shutter_speed', models.CharField(max_length=10, primary_key=True, serialize=False, verbose_name='Shutter speed in fractional notation, e.g. 1/250')),
                ('duration', models.DecimalField(decimal_places=5, max_digits=9, verbose_name='Shutter speed in models.DecimalField notation, e.g. 0.04')),
            ],
        ),
        migrations.CreateModel(
            name='ShutterType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=45, verbose_name='Name of the shutter type (e.g. Focal plane, Leaf, etc)')),
            ],
        ),
        migrations.CreateModel(
            name='Teleconverter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=45, verbose_name='Model name of this teleconverter')),
                ('factor', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Magnification factor of this teleconverter (numerical part only, e.g. 1.4)')),
                ('elements', models.IntegerField(verbose_name='Number of optical elements used in this teleconverter')),
                ('groups', models.IntegerField(verbose_name='Number of optical groups used in this teleconverter')),
                ('multicoated', models.BooleanField(verbose_name='Whether this teleconverter is multi-coated')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer')),
                ('mount', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Mount')),
            ],
        ),
        migrations.CreateModel(
            name='Toner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45, verbose_name='Name of the toner')),
                ('formulation', models.CharField(max_length=45, verbose_name='Chemical formulation of the toner')),
                ('stock_dilution', models.CharField(max_length=10, verbose_name='Stock dilution of the toner')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer')),
            ],
        ),
        migrations.AddField(
            model_name='lightmeter',
            name='metering_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.MeteringType'),
        ),
        migrations.AddField(
            model_name='flash',
            name='flash_protocol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.FlashProtocol'),
        ),
        migrations.AddField(
            model_name='flash',
            name='manufacturer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AddField(
            model_name='filmstock',
            name='process_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Process'),
        ),
        migrations.AddField(
            model_name='bulkfilm',
            name='filmstock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.FilmStock'),
        ),
        migrations.AddField(
            model_name='bulkfilm',
            name='format',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schema.Format'),
        ),
    ]
