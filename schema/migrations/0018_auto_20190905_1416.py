# Generated by Django 2.2.4 on 2019-09-05 14:16

from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('schema', '0017_data'),
    ]

    operations = [
        migrations.AlterField(
            model_name='accessory',
            name='acquired',
            field=models.DateField(blank=True, help_text='Date that this accessory was acquired', null=True),
        ),
        migrations.AlterField(
            model_name='accessory',
            name='cost',
            field=djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='GBP', help_text='Purchase cost of the accessory', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='accessory',
            name='lost',
            field=models.DateField(blank=True, help_text='Date that this accessory was lost', null=True),
        ),
        migrations.AlterField(
            model_name='accessory',
            name='lost_price',
            field=djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='GBP', help_text='Sale price of the accessory', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='accessory',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this accessory', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='accessory',
            name='model',
            field=models.CharField(help_text='Model of the accessory', max_length=45),
        ),
        migrations.AlterField(
            model_name='accessory',
            name='type',
            field=models.ForeignKey(help_text='Type of accessory', on_delete=django.db.models.deletion.CASCADE, to='schema.AccessoryType'),
        ),
        migrations.AlterField(
            model_name='accessorytype',
            name='type',
            field=models.CharField(help_text='Type of accessory', max_length=45, unique=True),
        ),
        migrations.AlterField(
            model_name='archive',
            name='location',
            field=models.CharField(blank=True, help_text='Location of this archive', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='archive',
            name='max_height',
            field=models.IntegerField(blank=True, help_text='Maximum height of media that this archive can store', null=True),
        ),
        migrations.AlterField(
            model_name='archive',
            name='max_width',
            field=models.IntegerField(blank=True, help_text='Maximum width of media that this archive can store', null=True),
        ),
        migrations.AlterField(
            model_name='archive',
            name='name',
            field=models.CharField(help_text='Name of this archive', max_length=45, unique=True),
        ),
        migrations.AlterField(
            model_name='archive',
            name='sealed',
            field=models.BooleanField(default=0, help_text='Whether or not this archive is sealed (closed to new additions)'),
        ),
        migrations.AlterField(
            model_name='archive',
            name='storage',
            field=models.CharField(blank=True, help_text='The type of storage used for this archive, e.g. box, folder, ringbinder, etc', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='archive',
            name='type',
            field=models.ForeignKey(help_text='What is stored in this archive?', on_delete=django.db.models.deletion.CASCADE, to='schema.ArchiveType'),
        ),
        migrations.AlterField(
            model_name='archivetype',
            name='type',
            field=models.CharField(help_text='Name of this type of archive', max_length=45, unique=True),
        ),
        migrations.AlterField(
            model_name='battery',
            name='chemistry',
            field=models.CharField(blank=True, help_text='Battery chemistry (e.g. Alkaline, Lithium, etc)', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='battery',
            name='name',
            field=models.CharField(help_text='Common name of the battery', max_length=45, unique=True),
        ),
        migrations.AlterField(
            model_name='battery',
            name='other_names',
            field=models.CharField(blank=True, help_text='Alternative names for this kind of battery', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='battery',
            name='voltage',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Nominal voltage of the battery', max_digits=5, null=True),
        ),
        migrations.AlterField(
            model_name='bodytype',
            name='type',
            field=models.CharField(help_text='Name of camera body type (e.g. SLR, compact, etc)', max_length=45, unique=True),
        ),
        migrations.AlterField(
            model_name='bulkfilm',
            name='batch',
            field=models.CharField(blank=True, help_text='Batch code of this bulk roll', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='bulkfilm',
            name='cost',
            field=djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='GBP', help_text='Purchase cost of this bulk roll', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='bulkfilm',
            name='expiry',
            field=models.DateField(blank=True, help_text='Expiry date of this bulk roll', null=True),
        ),
        migrations.AlterField(
            model_name='bulkfilm',
            name='filmstock',
            field=models.ForeignKey(help_text='Filmstock of this bulk film', on_delete=django.db.models.deletion.CASCADE, to='schema.FilmStock'),
        ),
        migrations.AlterField(
            model_name='bulkfilm',
            name='format',
            field=models.ForeignKey(help_text='Film format of this bulk film', on_delete=django.db.models.deletion.CASCADE, to='schema.Format'),
        ),
        migrations.AlterField(
            model_name='bulkfilm',
            name='purchase_date',
            field=models.DateField(blank=True, help_text='Purchase date of this bulk roll', null=True),
        ),
        migrations.AlterField(
            model_name='bulkfilm',
            name='source',
            field=models.CharField(blank=True, help_text='Place where this bulk roll was bought from', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='camera',
            name='acquired',
            field=models.DateField(blank=True, help_text='Date on which the camera was acquired', null=True),
        ),
        migrations.AlterField(
            model_name='camera',
            name='cameramodel',
            field=models.ForeignKey(help_text='Camera model of this camera', on_delete=django.db.models.deletion.CASCADE, to='schema.CameraModel'),
        ),
        migrations.AlterField(
            model_name='camera',
            name='condition',
            field=models.ForeignKey(blank=True, help_text='Condition of this camera', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Condition'),
        ),
        migrations.AlterField(
            model_name='camera',
            name='condition_notes',
            field=models.CharField(blank=True, help_text='Description of condition', max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='camera',
            name='cost',
            field=djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='GBP', help_text='Price paid for this camera', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='camera',
            name='datecode',
            field=models.CharField(blank=True, help_text='Date code of the camera, if different from the serial number', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='camera',
            name='lens',
            field=models.ForeignKey(blank=True, help_text='Lens attached to this camera, if it is a fixed-lens camera', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Lens'),
        ),
        migrations.AlterField(
            model_name='camera',
            name='lost',
            field=models.DateField(blank=True, help_text='Date on which the camera was lost/sold/etc', null=True),
        ),
        migrations.AlterField(
            model_name='camera',
            name='lost_price',
            field=djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='GBP', help_text='Sale price of the camera', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='camera',
            name='manufactured',
            field=models.IntegerField(blank=True, help_text='Year of manufacture of the camera', null=True),
        ),
        migrations.AlterField(
            model_name='camera',
            name='notes',
            field=models.CharField(blank=True, help_text='Freeform text field for extra notes', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='camera',
            name='own',
            field=models.BooleanField(blank=True, help_text='Whether the camera is currently owned', null=True),
        ),
        migrations.AlterField(
            model_name='camera',
            name='serial',
            field=models.CharField(blank=True, help_text='Serial number of the camera', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='camera',
            name='source',
            field=models.CharField(blank=True, help_text='Where the camera was acquired from', max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='af_points',
            field=models.IntegerField(blank=True, help_text='Number of autofocus points', null=True, verbose_name='Autofocus points'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='battery_qty',
            field=models.IntegerField(blank=True, help_text='Quantity of batteries needed', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='battery_type',
            field=models.ForeignKey(blank=True, help_text='Battery type that this camera model needs', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Battery'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='body_type',
            field=models.ForeignKey(blank=True, help_text='Body type of this camera model', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.BodyType'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='bulb',
            field=models.BooleanField(blank=True, help_text='Whether the camera supports bulb (B) exposure', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='cable_release',
            field=models.BooleanField(blank=True, help_text='Whether the camera has the facility for a remote cable release', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='coldshoe',
            field=models.BooleanField(blank=True, help_text='Whether the camera has a coldshoe or accessory shoe', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='continuous_fps',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='The maximum rate at which the camera can shoot, in frames per second', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='coupled_metering',
            field=models.BooleanField(blank=True, help_text='Whether the cameras meter is coupled automatically', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='digital',
            field=models.BooleanField(blank=True, default=0, help_text='Whether this is a digital camera', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='discontinued',
            field=models.IntegerField(blank=True, help_text='Year in which the camera model was discontinued', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='dof_preview',
            field=models.BooleanField(blank=True, help_text='Whether the camera has depth of field preview', null=True, verbose_name='DoF preview'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='ext_flash',
            field=models.BooleanField(blank=True, help_text='Whether the camera supports an external flash', null=True, verbose_name='External flash'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='fixed_mount',
            field=models.BooleanField(blank=True, help_text='Whether the camera has a fixed lens', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='flash_metering',
            field=models.ForeignKey(blank=True, help_text='Whether this camera model supports flash metering', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.FlashProtocol'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='focus_type',
            field=models.ForeignKey(blank=True, help_text='Focus type used on this camera model', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.FocusType'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='format',
            field=models.ForeignKey(blank=True, help_text='Film format used by this camera model', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Format'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='hotshoe',
            field=models.BooleanField(blank=True, help_text='Whether the camera has a hotshoe', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='int_flash',
            field=models.BooleanField(blank=True, help_text='Whether the camera has an integrated flash', null=True, verbose_name='Internal flash'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='int_flash_gn',
            field=models.IntegerField(blank=True, help_text='Guide number of internal flash', null=True, verbose_name='Internal flash guide number'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='introduced',
            field=models.IntegerField(blank=True, help_text='Year in which the camera model was introduced', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='lensmodel',
            field=models.ForeignKey(blank=True, help_text='Lens model attached to this camera model, if it is a fixed-lens camera', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.LensModel'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this camera model', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='max_iso',
            field=models.IntegerField(blank=True, help_text='Maximum ISO the camera will accept for metering', null=True, verbose_name='Max ISO'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='meter_max_ev',
            field=models.IntegerField(blank=True, help_text='Highest EV/LV the built-in meter supports', null=True, verbose_name='Max EV'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='meter_min_ev',
            field=models.IntegerField(blank=True, help_text='Lowest EV/LV the built-in meter supports', null=True, verbose_name='Min EV'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='metering',
            field=models.BooleanField(blank=True, help_text='Whether the camera has built-in metering', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='metering_type',
            field=models.ForeignKey(blank=True, help_text='Metering type used on this camera model', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.MeteringType'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='min_iso',
            field=models.IntegerField(blank=True, help_text='Minimum ISO the camera will accept for metering', null=True, verbose_name='Min ISO'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='model',
            field=models.CharField(help_text='The model name of the camera', max_length=45),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='mount',
            field=models.ForeignKey(blank=True, help_text='Lens mount used by this camera model', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Mount'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='negative_size',
            field=models.ForeignKey(blank=True, help_text='Size of negative created by this camera', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.NegativeSize'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='notes',
            field=models.CharField(blank=True, help_text='Freeform text field for extra notes', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='pc_sync',
            field=models.BooleanField(blank=True, help_text='Whether the camera has a PC sync socket for flash', null=True, verbose_name='PC sync'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='power_drive',
            field=models.BooleanField(blank=True, help_text='Whether the camera has integrated motor drive', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='shutter_model',
            field=models.CharField(blank=True, help_text='Model of shutter', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='shutter_type',
            field=models.ForeignKey(blank=True, help_text='Type of shutter used on this camera', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.ShutterType'),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='time',
            field=models.BooleanField(blank=True, help_text='Whether the camera supports time (T) exposure', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='tripod',
            field=models.BooleanField(blank=True, help_text='Whether the camera has a tripod bush', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='video',
            field=models.BooleanField(blank=True, help_text='Whether the camera can take video/movie', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='viewfinder_coverage',
            field=models.IntegerField(blank=True, help_text='Percentage coverage of the viewfinder. Mostly applicable to SLRs.', null=True),
        ),
        migrations.AlterField(
            model_name='cameramodel',
            name='weight',
            field=models.IntegerField(blank=True, help_text='Weight of the camera body (without lens or batteries) in grammes (g)', null=True),
        ),
        migrations.AlterField(
            model_name='condition',
            name='code',
            field=models.CharField(help_text='Condition shortcode (e.g. EXC)', max_length=6),
        ),
        migrations.AlterField(
            model_name='condition',
            name='description',
            field=models.CharField(help_text='Longer description of condition', max_length=300),
        ),
        migrations.AlterField(
            model_name='condition',
            name='max_rating',
            field=models.IntegerField(help_text='The highest percentage rating that encompasses this condition'),
        ),
        migrations.AlterField(
            model_name='condition',
            name='min_rating',
            field=models.IntegerField(help_text='The lowest percentage rating that encompasses this condition'),
        ),
        migrations.AlterField(
            model_name='condition',
            name='name',
            field=models.CharField(help_text='Full name of condition (e.g. Excellent)', max_length=45),
        ),
        migrations.AlterField(
            model_name='developer',
            name='chemistry',
            field=models.CharField(blank=True, help_text='The key chemistry on which this developer is based (e.g. phenidone)', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='developer',
            name='for_film',
            field=models.BooleanField(blank=True, help_text='Whether this developer can be used with film', null=True),
        ),
        migrations.AlterField(
            model_name='developer',
            name='for_paper',
            field=models.BooleanField(blank=True, help_text='Whether this developer can be used with paper', null=True),
        ),
        migrations.AlterField(
            model_name='developer',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this developer', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='developer',
            name='name',
            field=models.CharField(help_text='Name of the developer', max_length=45),
        ),
        migrations.AlterField(
            model_name='enlarger',
            name='acquired',
            field=models.DateField(blank=True, help_text='Date on which the enlarger was acquired', null=True),
        ),
        migrations.AlterField(
            model_name='enlarger',
            name='cost',
            field=djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='GBP', help_text='Purchase cost of this enlarger', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='enlarger',
            name='discontinued',
            field=models.IntegerField(blank=True, help_text='Year in which the enlarger was discontinued', null=True),
        ),
        migrations.AlterField(
            model_name='enlarger',
            name='introduced',
            field=models.IntegerField(blank=True, help_text='Year in which the enlarger was introduced', null=True),
        ),
        migrations.AlterField(
            model_name='enlarger',
            name='lost',
            field=models.DateField(blank=True, help_text='Date on which the enlarger was lost/sold', null=True),
        ),
        migrations.AlterField(
            model_name='enlarger',
            name='lost_price',
            field=djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='GBP', help_text='Sale price of the enlarger', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='enlarger',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this enlarger', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='enlarger',
            name='model',
            field=models.CharField(help_text='Name/model of the enlarger', max_length=45),
        ),
        migrations.AlterField(
            model_name='enlarger',
            name='negative_size',
            field=models.ForeignKey(blank=True, help_text='Largest negative size that this enlarger can accept', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.NegativeSize'),
        ),
        migrations.AlterField(
            model_name='exposureprogram',
            name='name',
            field=models.CharField(help_text='Name of exposure program as defined by EXIF tag ExposureProgram', max_length=45),
        ),
        migrations.AlterField(
            model_name='film',
            name='archive',
            field=models.ForeignKey(blank=True, help_text='Archive that this film is stored in', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Archive'),
        ),
        migrations.AlterField(
            model_name='film',
            name='bulk_film',
            field=models.ForeignKey(blank=True, help_text='Bulk film this film was cut from', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.BulkFilm'),
        ),
        migrations.AlterField(
            model_name='film',
            name='bulk_film_loaded',
            field=models.DateField(blank=True, help_text='Date that this film was cut from a bulk roll', null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='camera',
            field=models.ForeignKey(blank=True, help_text='Camera that this film was loaded into', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Camera'),
        ),
        migrations.AlterField(
            model_name='film',
            name='date_loaded',
            field=models.DateField(blank=True, help_text='Date when the film was loaded into a camera', null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='date_processed',
            field=models.DateField(blank=True, help_text='Date when the film was processed', null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='dev_n',
            field=models.IntegerField(blank=True, help_text='Number of the Push/Pull rating of the film, e.g. N+1, N-2', null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='dev_temp',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Temperature of development', max_digits=3, null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='dev_time',
            field=models.DurationField(blank=True, help_text='Duration of development', null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='dev_uses',
            field=models.IntegerField(blank=True, help_text='Number of previous uses of the developer', null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='developer',
            field=models.ForeignKey(blank=True, help_text='Developer used to develop this film', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Developer'),
        ),
        migrations.AlterField(
            model_name='film',
            name='development_notes',
            field=models.CharField(blank=True, help_text='Extra freeform notes about the development process', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='directory',
            field=models.CharField(blank=True, help_text='Name of the directory that contains the scanned images from this film', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='expiry_date',
            field=models.DateField(blank=True, help_text='Expiry date of the film', null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='exposed_at',
            field=models.IntegerField(blank=True, help_text='ISO at which the film was exposed', null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='film_batch',
            field=models.CharField(blank=True, help_text='Batch number of the film', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='filmstock',
            field=models.ForeignKey(help_text='Filmstock that this film is', on_delete=django.db.models.deletion.CASCADE, to='schema.FilmStock'),
        ),
        migrations.AlterField(
            model_name='film',
            name='format',
            field=models.ForeignKey(help_text='Film format of this film', on_delete=django.db.models.deletion.CASCADE, to='schema.Format'),
        ),
        migrations.AlterField(
            model_name='film',
            name='frames',
            field=models.IntegerField(blank=True, help_text='Expected (not actual) number of frames from the film', null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='price',
            field=djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='GBP', help_text='Price paid for this film', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='processed_by',
            field=models.CharField(blank=True, help_text='Person or place that processed this film', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='purchase_date',
            field=models.DateField(blank=True, help_text='Date this film was purchased', null=True),
        ),
        migrations.AlterField(
            model_name='film',
            name='title',
            field=models.CharField(blank=True, help_text='Title of the film', max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='filmstock',
            name='colour',
            field=models.BooleanField(blank=True, help_text='Whether the film is colour', null=True),
        ),
        migrations.AlterField(
            model_name='filmstock',
            name='iso',
            field=models.IntegerField(blank=True, help_text='Nominal ISO speed of the film', null=True, verbose_name='ISO'),
        ),
        migrations.AlterField(
            model_name='filmstock',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this film', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='filmstock',
            name='name',
            field=models.CharField(help_text='Name of the filmstock', max_length=45),
        ),
        migrations.AlterField(
            model_name='filmstock',
            name='panchromatic',
            field=models.BooleanField(blank=True, help_text='Whether this film is panchromatic', null=True),
        ),
        migrations.AlterField(
            model_name='filmstock',
            name='process',
            field=models.ForeignKey(blank=True, help_text='Development process required by this film', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Process'),
        ),
        migrations.AlterField(
            model_name='filter',
            name='attenuation',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Attenuation of this filter in decimal stops', max_digits=3, null=True),
        ),
        migrations.AlterField(
            model_name='filter',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this filter', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='filter',
            name='qty',
            field=models.IntegerField(blank=True, default=1, help_text='Quantity of these filters available', null=True),
        ),
        migrations.AlterField(
            model_name='filter',
            name='thread',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Diameter of screw thread in mm', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='filter',
            name='type',
            field=models.CharField(help_text='Filter type (e.g. Red, CPL, UV)', max_length=45),
        ),
        migrations.AlterField(
            model_name='filteradapter',
            name='camera_thread',
            field=models.DecimalField(decimal_places=1, help_text='Diameter of camera-facing screw thread in mm', max_digits=3),
        ),
        migrations.AlterField(
            model_name='filteradapter',
            name='filter_thread',
            field=models.DecimalField(decimal_places=1, help_text='Diameter of filter-facing screw thread in mm', max_digits=3),
        ),
        migrations.AlterField(
            model_name='flash',
            name='acquired',
            field=models.DateField(blank=True, help_text='Date this flash was acquired', null=True),
        ),
        migrations.AlterField(
            model_name='flash',
            name='battery_powered',
            field=models.BooleanField(blank=True, help_text='Whether this flash takes batteries', null=True),
        ),
        migrations.AlterField(
            model_name='flash',
            name='battery_qty',
            field=models.IntegerField(blank=True, help_text='Quantity of batteries needed in this flash', null=True),
        ),
        migrations.AlterField(
            model_name='flash',
            name='battery_type',
            field=models.ForeignKey(blank=True, help_text='Type of battery required by this flash', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Battery'),
        ),
        migrations.AlterField(
            model_name='flash',
            name='cost',
            field=djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='GBP', help_text='Purchase cost of this flash', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='flash',
            name='dslr_safe',
            field=models.BooleanField(blank=True, help_text='Whether this flash is safe to use with a digital camera', null=True, verbose_name='DSLR safe'),
        ),
        migrations.AlterField(
            model_name='flash',
            name='flash_protocol',
            field=models.ForeignKey(blank=True, help_text='Flash protocol used by this flash', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.FlashProtocol'),
        ),
        migrations.AlterField(
            model_name='flash',
            name='gn_info',
            field=models.CharField(blank=True, help_text='Extra freeform info about how the guide number was measured', max_length=45, null=True, verbose_name='Guide number info'),
        ),
        migrations.AlterField(
            model_name='flash',
            name='guide_number',
            field=models.IntegerField(blank=True, help_text='Guide number of the flash', null=True),
        ),
        migrations.AlterField(
            model_name='flash',
            name='hot_shoe',
            field=models.BooleanField(blank=True, help_text='Whether the flash has a hot shoe connection', null=True),
        ),
        migrations.AlterField(
            model_name='flash',
            name='light_stand',
            field=models.BooleanField(blank=True, help_text='Whether the flash can be used on a light stand', null=True),
        ),
        migrations.AlterField(
            model_name='flash',
            name='manual_control',
            field=models.BooleanField(blank=True, help_text='Whether this flash offers manual power control', null=True),
        ),
        migrations.AlterField(
            model_name='flash',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this flash', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='flash',
            name='model',
            field=models.CharField(help_text='Model name/number of the flash', max_length=45),
        ),
        migrations.AlterField(
            model_name='flash',
            name='own',
            field=models.BooleanField(blank=True, help_text='Whether we currently own this flash', null=True),
        ),
        migrations.AlterField(
            model_name='flash',
            name='pc_sync',
            field=models.BooleanField(blank=True, help_text='Whether the flash has a PC sync socket', null=True, verbose_name='PC sync'),
        ),
        migrations.AlterField(
            model_name='flash',
            name='swivel_head',
            field=models.BooleanField(blank=True, help_text='Whether this flash has a horizontal swivel head', null=True),
        ),
        migrations.AlterField(
            model_name='flash',
            name='tilt_head',
            field=models.BooleanField(blank=True, help_text='Whether this flash has a vertical tilt head', null=True),
        ),
        migrations.AlterField(
            model_name='flash',
            name='trigger_voltage',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Trigger voltage of the flash, in Volts', max_digits=5, null=True),
        ),
        migrations.AlterField(
            model_name='flash',
            name='ttl',
            field=models.BooleanField(blank=True, help_text='Whether this flash supports TTL metering', null=True, verbose_name='TTL'),
        ),
        migrations.AlterField(
            model_name='flash',
            name='zoom',
            field=models.BooleanField(blank=True, help_text='Whether this flash can zoom', null=True),
        ),
        migrations.AlterField(
            model_name='flashprotocol',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer who owns this flash protocol', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='flashprotocol',
            name='name',
            field=models.CharField(help_text='Name of the flash protocol', max_length=45),
        ),
        migrations.AlterField(
            model_name='focustype',
            name='name',
            field=models.CharField(help_text='Name of focus type', max_length=45),
        ),
        migrations.AlterField(
            model_name='format',
            name='digital',
            field=models.BooleanField(blank=True, help_text='Whether this is a digital format', null=True),
        ),
        migrations.AlterField(
            model_name='format',
            name='format',
            field=models.CharField(help_text='The name of this film/sensor format', max_length=45, unique=True),
        ),
        migrations.AlterField(
            model_name='lens',
            name='acquired',
            field=models.DateField(blank=True, help_text='Date on which this lens was acquired', null=True),
        ),
        migrations.AlterField(
            model_name='lens',
            name='condition',
            field=models.ForeignKey(blank=True, help_text='Condition of this lens', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Condition'),
        ),
        migrations.AlterField(
            model_name='lens',
            name='condition_notes',
            field=models.CharField(blank=True, help_text='Description of condition', max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='lens',
            name='cost',
            field=djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='GBP', help_text='Price paid for this lens', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='lens',
            name='date_code',
            field=models.CharField(blank=True, help_text='Date code of this lens, if different from the serial number', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='lens',
            name='lensmodel',
            field=models.ForeignKey(help_text='Lens model of this lens', on_delete=django.db.models.deletion.CASCADE, to='schema.LensModel'),
        ),
        migrations.AlterField(
            model_name='lens',
            name='lost',
            field=models.DateField(blank=True, help_text='Date on which lens was lost/sold/disposed', null=True),
        ),
        migrations.AlterField(
            model_name='lens',
            name='lost_price',
            field=djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='GBP', help_text='Sale price of the lens', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='lens',
            name='manufactured',
            field=models.IntegerField(blank=True, help_text='Year in which this specific lens was manufactured', null=True),
        ),
        migrations.AlterField(
            model_name='lens',
            name='notes',
            field=models.CharField(blank=True, help_text='Freeform notes field', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='lens',
            name='own',
            field=models.BooleanField(blank=True, help_text='Whether we currently own this lens', null=True),
        ),
        migrations.AlterField(
            model_name='lens',
            name='serial',
            field=models.CharField(blank=True, help_text='Serial number of this lens', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='lens',
            name='source',
            field=models.CharField(blank=True, help_text='Place where the lens was acquired from', max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='aperture_blades',
            field=models.IntegerField(blank=True, help_text='Number of aperture blades', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='autofocus',
            field=models.BooleanField(blank=True, help_text='Whether this lens has autofocus capability', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='closest_focus',
            field=models.IntegerField(blank=True, help_text='The closest focus possible with this lens, in cm', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='coating',
            field=models.CharField(blank=True, help_text='Notes about the lens coating type', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='diameter',
            field=models.IntegerField(blank=True, help_text='Width of lens in mm', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='discontinued',
            field=models.IntegerField(blank=True, help_text='Year in which this lens model was discontinued', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='elements',
            field=models.IntegerField(blank=True, help_text='Number of optical lens elements', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='exif_lenstype',
            field=models.CharField(blank=True, help_text='EXIF LensID number, if this lens has one officially registered. See documentation at http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='filter_thread',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Diameter of lens filter thread, in mm', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='fixed_mount',
            field=models.BooleanField(blank=True, help_text='Whether this is a fixed lens (i.e. on a compact camera)', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='formula',
            field=models.CharField(blank=True, help_text='Name of the type of lens formula (e.g. Tessar)', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='groups',
            field=models.IntegerField(blank=True, help_text='Number of optical groups', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='hood',
            field=models.CharField(blank=True, help_text='Model number of the compatible lens hood', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='image_circle',
            field=models.IntegerField(blank=True, help_text='Diameter of image circle projected by lens, in mm', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='introduced',
            field=models.IntegerField(blank=True, help_text='Year in which this lens model was introduced', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='length',
            field=models.IntegerField(blank=True, help_text='Length of lens in mm', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='magnification',
            field=models.DecimalField(blank=True, decimal_places=3, help_text='Maximum magnification ratio of the lens, expressed like 0.765', max_digits=5, null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this lens model', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='max_aperture',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Maximum (widest) aperture available on this lens (numerical part only, e.g. 2.8)', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='max_focal_length',
            field=models.IntegerField(blank=True, help_text='Longest focal length of this lens, in mm', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='min_aperture',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Minimum (narrowest) aperture available on this lens (numerical part only, e.g. 22)', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='min_focal_length',
            field=models.IntegerField(blank=True, help_text='Shortest focal length of this lens, in mm', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='model',
            field=models.CharField(help_text='Model name of this lens', max_length=45),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='mount',
            field=models.ForeignKey(blank=True, help_text='Mount used by this lens model', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Mount'),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='negative_size',
            field=models.ForeignKey(blank=True, help_text='Largest negative size that this lens is designed for', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.NegativeSize'),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='nominal_max_angle_diag',
            field=models.IntegerField(blank=True, help_text='Nominal maximum diagonal field of view from manufacturer specs', null=True, verbose_name='Max angle of view'),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='nominal_min_angle_diag',
            field=models.IntegerField(blank=True, help_text='Nominal minimum diagonal field of view from manufacturer specs', null=True, verbose_name='Min angle of view'),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='notes',
            field=models.CharField(blank=True, help_text='Freeform notes field', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='rectilinear',
            field=models.BooleanField(blank=True, default=1, help_text='Whether this is a rectilinear lens', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='shutter_model',
            field=models.CharField(blank=True, help_text='Name of the integrated shutter, if any', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='url',
            field=models.URLField(blank=True, help_text='URL to more information about this lens', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='weight',
            field=models.IntegerField(blank=True, help_text='Weight of this lens, in grammes (g)', null=True),
        ),
        migrations.AlterField(
            model_name='lensmodel',
            name='zoom',
            field=models.BooleanField(blank=True, help_text='Whether this is a zoom lens', null=True),
        ),
        migrations.AlterField(
            model_name='lightmeter',
            name='flash',
            field=models.BooleanField(blank=True, help_text='Whether the meter is capable of flash metering', null=True),
        ),
        migrations.AlterField(
            model_name='lightmeter',
            name='incident',
            field=models.BooleanField(blank=True, help_text='Whether the meter is capable of incident-light metering', null=True),
        ),
        migrations.AlterField(
            model_name='lightmeter',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this light meter', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='lightmeter',
            name='max_asa',
            field=models.IntegerField(blank=True, help_text='Maximum ISO/ASA that this meter is capable of handling', null=True, verbose_name='Max ISO'),
        ),
        migrations.AlterField(
            model_name='lightmeter',
            name='max_lv',
            field=models.IntegerField(blank=True, help_text='Maximum light value (LV/EV) that this meter is capable of handling', null=True, verbose_name='Max LV'),
        ),
        migrations.AlterField(
            model_name='lightmeter',
            name='metering_type',
            field=models.ForeignKey(blank=True, help_text='Metering type used in this meter', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.MeteringType'),
        ),
        migrations.AlterField(
            model_name='lightmeter',
            name='min_asa',
            field=models.IntegerField(blank=True, help_text='Minimum ISO/ASA that this meter is capable of handling', null=True, verbose_name='Min ISO'),
        ),
        migrations.AlterField(
            model_name='lightmeter',
            name='min_lv',
            field=models.IntegerField(blank=True, help_text='Minimum light value (LV/EV) that this meter is capable of handling', null=True, verbose_name='Min LV'),
        ),
        migrations.AlterField(
            model_name='lightmeter',
            name='model',
            field=models.CharField(help_text='Model name or number of the light meter', max_length=45),
        ),
        migrations.AlterField(
            model_name='lightmeter',
            name='reflected',
            field=models.BooleanField(blank=True, help_text='Whether the meter is capable of reflected-light metering', null=True),
        ),
        migrations.AlterField(
            model_name='lightmeter',
            name='spot',
            field=models.BooleanField(blank=True, help_text='Whether the meter is capable of spot metering', null=True),
        ),
        migrations.AlterField(
            model_name='manufacturer',
            name='city',
            field=models.CharField(blank=True, help_text='City in which the manufacturer is based', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='manufacturer',
            name='country',
            field=models.CharField(blank=True, help_text='Country in which the manufacturer is based', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='manufacturer',
            name='dissolved',
            field=models.DateField(blank=True, help_text='Year in which the manufacturer was dissolved', null=True),
        ),
        migrations.AlterField(
            model_name='manufacturer',
            name='founded',
            field=models.DateField(blank=True, help_text='Year in which the manufacturer was founded', null=True),
        ),
        migrations.AlterField(
            model_name='manufacturer',
            name='name',
            field=models.CharField(help_text='Name of the manufacturer', max_length=45, unique=True),
        ),
        migrations.AlterField(
            model_name='manufacturer',
            name='url',
            field=models.URLField(blank=True, help_text='URL to the manufacturers main website', max_length=45, null=True, verbose_name='URL'),
        ),
        migrations.AlterField(
            model_name='meteringmode',
            name='name',
            field=models.CharField(help_text='Name of metering mode as defined by EXIF tag MeteringMode', max_length=45),
        ),
        migrations.AlterField(
            model_name='meteringtype',
            name='name',
            field=models.CharField(help_text='Name of the metering technology (e.g. Selenium)', max_length=45),
        ),
        migrations.AlterField(
            model_name='mount',
            name='digital_only',
            field=models.BooleanField(blank=True, default=0, help_text='Whether this mount is models.intended only for digital cameras', null=True),
        ),
        migrations.AlterField(
            model_name='mount',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer who owns this lens mount', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='mount',
            name='mount',
            field=models.CharField(help_text='Name of this lens mount (e.g. Canon FD)', max_length=45, unique=True),
        ),
        migrations.AlterField(
            model_name='mount',
            name='notes',
            field=models.CharField(blank=True, help_text='Freeform notes field', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='mount',
            name='purpose',
            field=models.CharField(blank=True, help_text='The intended purpose of this lens mount (e.g. camera, enlarger, projector)', max_length=25, null=True),
        ),
        migrations.AlterField(
            model_name='mount',
            name='shutter_in_lens',
            field=models.BooleanField(blank=True, default=0, help_text='Whether this lens mount system incorporates the shutter models.IntegerFieldo the lens', null=True),
        ),
        migrations.AlterField(
            model_name='mount',
            name='type',
            field=models.CharField(blank=True, help_text='The physical mount type of this lens mount (e.g. Screw, Bayonet, etc)', max_length=25, null=True),
        ),
        migrations.AlterField(
            model_name='movie',
            name='camera',
            field=models.ForeignKey(blank=True, help_text='Camera used to shoot this movie', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Camera'),
        ),
        migrations.AlterField(
            model_name='movie',
            name='date_loaded',
            field=models.DateField(blank=True, help_text='Date that the filmstock was loaded into a camera', null=True),
        ),
        migrations.AlterField(
            model_name='movie',
            name='date_processed',
            field=models.DateField(blank=True, help_text='Date on which this movie was processed', null=True),
        ),
        migrations.AlterField(
            model_name='movie',
            name='date_shot',
            field=models.DateField(blank=True, help_text='Date on which this movie was shot', null=True),
        ),
        migrations.AlterField(
            model_name='movie',
            name='description',
            field=models.CharField(blank=True, help_text='Description of this movie', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='movie',
            name='duration',
            field=models.DurationField(blank=True, help_text='Duration of this movie', null=True),
        ),
        migrations.AlterField(
            model_name='movie',
            name='feet',
            field=models.IntegerField(blank=True, help_text='Length of this movie in feet', null=True),
        ),
        migrations.AlterField(
            model_name='movie',
            name='filmstock',
            field=models.ForeignKey(blank=True, help_text='Filmstock that this movie was shot on', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.FilmStock'),
        ),
        migrations.AlterField(
            model_name='movie',
            name='format',
            field=models.ForeignKey(blank=True, help_text='Film format of this movie', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Format'),
        ),
        migrations.AlterField(
            model_name='movie',
            name='fps',
            field=models.IntegerField(blank=True, help_text='Frame rate of this movie, in fps', null=True, verbose_name='FPS'),
        ),
        migrations.AlterField(
            model_name='movie',
            name='lens',
            field=models.ForeignKey(blank=True, help_text='Lens used to shoot this movie', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Lens'),
        ),
        migrations.AlterField(
            model_name='movie',
            name='process',
            field=models.ForeignKey(blank=True, help_text='Process used to develop this movie', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Process'),
        ),
        migrations.AlterField(
            model_name='movie',
            name='sound',
            field=models.BooleanField(blank=True, help_text='Whether this movie has sound', null=True),
        ),
        migrations.AlterField(
            model_name='movie',
            name='title',
            field=models.CharField(help_text='Title of this movie', max_length=45),
        ),
        migrations.AlterField(
            model_name='negative',
            name='aperture',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Aperture used to take this picture (numerical part only)', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='negative',
            name='caption',
            field=models.CharField(blank=True, help_text='Caption of this picture', max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='negative',
            name='date',
            field=models.DateTimeField(blank=True, help_text='Date & time on which this picture was taken', null=True),
        ),
        migrations.AlterField(
            model_name='negative',
            name='exposure_program',
            field=models.ForeignKey(blank=True, help_text='Exposure program used when taking the image', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.ExposureProgram'),
        ),
        migrations.AlterField(
            model_name='negative',
            name='film',
            field=models.ForeignKey(help_text='Film that this negative belongs to', on_delete=django.db.models.deletion.CASCADE, to='schema.Film'),
        ),
        migrations.AlterField(
            model_name='negative',
            name='filter',
            field=models.ForeignKey(blank=True, help_text='Filter used when taking this negative', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Filter'),
        ),
        migrations.AlterField(
            model_name='negative',
            name='flash',
            field=models.BooleanField(blank=True, help_text='Whether flash was used', null=True),
        ),
        migrations.AlterField(
            model_name='negative',
            name='focal_length',
            field=models.IntegerField(blank=True, help_text='If a zoom lens was used, specify the focal length of the lens', null=True),
        ),
        migrations.AlterField(
            model_name='negative',
            name='frame',
            field=models.CharField(help_text='Frame number or code of this negative', max_length=8),
        ),
        migrations.AlterField(
            model_name='negative',
            name='latitude',
            field=models.DecimalField(blank=True, decimal_places=6, help_text='Latitude of the location where the picture was taken', max_digits=9, null=True),
        ),
        migrations.AlterField(
            model_name='negative',
            name='lens',
            field=models.ForeignKey(blank=True, help_text='Lens used to take this negative', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Lens'),
        ),
        migrations.AlterField(
            model_name='negative',
            name='longitude',
            field=models.DecimalField(blank=True, decimal_places=6, help_text='Longitude of the location where the picture was taken', max_digits=9, null=True),
        ),
        migrations.AlterField(
            model_name='negative',
            name='metering_mode',
            field=models.ForeignKey(blank=True, help_text='Metering mode used when taking the image', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.MeteringMode'),
        ),
        migrations.AlterField(
            model_name='negative',
            name='notes',
            field=models.CharField(blank=True, help_text='Extra freeform notes about this exposure', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='negative',
            name='photographer',
            field=models.ForeignKey(blank=True, help_text='Photographer who took the negative', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Person'),
        ),
        migrations.AlterField(
            model_name='negative',
            name='shutter_speed',
            field=models.ForeignKey(blank=True, help_text='Shutter speed used to take this negative', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.ShutterSpeed'),
        ),
        migrations.AlterField(
            model_name='negative',
            name='teleconverter',
            field=models.ForeignKey(blank=True, help_text='Teleconverter used when taking this negative', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Teleconverter'),
        ),
        migrations.AlterField(
            model_name='negativesize',
            name='area',
            field=models.IntegerField(blank=True, help_text='Area of this negative size in sq. mm', null=True),
        ),
        migrations.AlterField(
            model_name='negativesize',
            name='aspect_ratio',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Aspect ratio of this negative size, expressed as a single decimal (e.g. 3:2 is expressed as 1.5)', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='negativesize',
            name='crop_factor',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Crop factor of this negative size', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='negativesize',
            name='height',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Height of the negative size in mm', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='negativesize',
            name='name',
            field=models.CharField(help_text='Common name of the negative size (e.g. 35mm, 6x7, etc)', max_length=45, unique=True),
        ),
        migrations.AlterField(
            model_name='negativesize',
            name='width',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Width of the negative size in mm', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='order',
            name='added',
            field=models.DateField(blank=True, help_text='Date that the order was placed', null=True),
        ),
        migrations.AlterField(
            model_name='order',
            name='height',
            field=models.IntegerField(blank=True, help_text='Height of print to be made', null=True),
        ),
        migrations.AlterField(
            model_name='order',
            name='negative',
            field=models.ForeignKey(help_text='Negative that needs to be printed', on_delete=django.db.models.deletion.CASCADE, to='schema.Negative'),
        ),
        migrations.AlterField(
            model_name='order',
            name='print',
            field=models.ForeignKey(blank=True, help_text='Print that was made to fulfil this order', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Print'),
        ),
        migrations.AlterField(
            model_name='order',
            name='printed',
            field=models.BooleanField(blank=True, help_text='Whether the print has been made', null=True),
        ),
        migrations.AlterField(
            model_name='order',
            name='recipient',
            field=models.ForeignKey(help_text='Person who placed this order', on_delete=django.db.models.deletion.CASCADE, to='schema.Person'),
        ),
        migrations.AlterField(
            model_name='order',
            name='width',
            field=models.IntegerField(blank=True, help_text='Width of print to be made', null=True),
        ),
        migrations.AlterField(
            model_name='paperstock',
            name='colour',
            field=models.BooleanField(blank=True, help_text='Whether this is a colour paper', null=True),
        ),
        migrations.AlterField(
            model_name='paperstock',
            name='finish',
            field=models.CharField(blank=True, help_text='The finish of the paper surface', max_length=25, null=True),
        ),
        migrations.AlterField(
            model_name='paperstock',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this paper stock', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='paperstock',
            name='name',
            field=models.CharField(help_text='Name of this paper stock', max_length=45),
        ),
        migrations.AlterField(
            model_name='paperstock',
            name='resin_coated',
            field=models.BooleanField(blank=True, help_text='Whether the paper is resin-coated', null=True),
        ),
        migrations.AlterField(
            model_name='paperstock',
            name='tonable',
            field=models.BooleanField(blank=True, help_text='Whether this paper accepts chemical toning', null=True),
        ),
        migrations.AlterField(
            model_name='person',
            name='name',
            field=models.CharField(help_text='Name of the photographer', max_length=45, unique=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='aperture',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Aperture used to make this print (numerical part only, e.g. 5.6)', max_digits=3, null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='archive',
            field=models.ForeignKey(blank=True, help_text='Archive that this print is stored in', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Archive'),
        ),
        migrations.AlterField(
            model_name='print',
            name='bleach_time',
            field=models.DurationField(blank=True, help_text='Duration of bleaching', null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='date',
            field=models.DateField(blank=True, help_text='The date that the print was made', null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='developer',
            field=models.ForeignKey(blank=True, help_text='Developer used to develop this print', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Developer'),
        ),
        migrations.AlterField(
            model_name='print',
            name='development_time',
            field=models.DurationField(blank=True, help_text='Development time of this print', null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='enlarger',
            field=models.ForeignKey(blank=True, help_text='Enlarger used to make this print', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Enlarger'),
        ),
        migrations.AlterField(
            model_name='print',
            name='exposure_time',
            field=models.DurationField(blank=True, help_text='Exposure time of this print', null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='filtration_grade',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Contrast grade of paper used', max_digits=2, null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='fine',
            field=models.BooleanField(blank=True, help_text='Whether this is a fine print', null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='height',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Height of the print in inches', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='lens',
            field=models.ForeignKey(blank=True, help_text='Enlarger lens used to make this print', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Lens'),
        ),
        migrations.AlterField(
            model_name='print',
            name='location',
            field=models.CharField(blank=True, help_text='The place where this print is currently', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='negative',
            field=models.ForeignKey(help_text='Negative that this print was made from', on_delete=django.db.models.deletion.CASCADE, to='schema.Negative'),
        ),
        migrations.AlterField(
            model_name='print',
            name='notes',
            field=models.CharField(blank=True, help_text='Freeform notes about this print, e.g. dodging, burning & complex toning', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='own',
            field=models.BooleanField(blank=True, help_text='Whether we currently own this print', null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='paper_stock',
            field=models.ForeignKey(blank=True, help_text='Paper stock that this print was made on', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.PaperStock'),
        ),
        migrations.AlterField(
            model_name='print',
            name='printer',
            field=models.ForeignKey(blank=True, help_text='Person who made this print', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Person'),
        ),
        migrations.AlterField(
            model_name='print',
            name='sold_price',
            field=djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='GBP', help_text='Sale price of the print', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='toner',
            field=models.ForeignKey(blank=True, help_text='First toner used to tone this print', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Toner'),
        ),
        migrations.AlterField(
            model_name='print',
            name='toner_dilution',
            field=models.CharField(blank=True, help_text='Dilution of the first toner used to make this print', max_length=8, null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='toner_time',
            field=models.DurationField(blank=True, help_text='Duration of first toning', null=True),
        ),
        migrations.AlterField(
            model_name='print',
            name='width',
            field=models.DecimalField(blank=True, decimal_places=1, help_text='Width of the print in inches', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='process',
            name='colour',
            field=models.BooleanField(blank=True, help_text='Whether this is a colour process', null=True),
        ),
        migrations.AlterField(
            model_name='process',
            name='name',
            field=models.CharField(help_text='Name of this developmenmt process (e.g. C-41, E-6)', max_length=25, unique=True),
        ),
        migrations.AlterField(
            model_name='process',
            name='positive',
            field=models.BooleanField(blank=True, help_text='Whether this is a positive/reversal process', null=True),
        ),
        migrations.AlterField(
            model_name='projector',
            name='cine',
            field=models.BooleanField(blank=True, help_text='Whether this is a cine (movie) projector', null=True),
        ),
        migrations.AlterField(
            model_name='projector',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this projector', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='projector',
            name='model',
            field=models.CharField(help_text='Model name of this projector', max_length=45),
        ),
        migrations.AlterField(
            model_name='projector',
            name='mount',
            field=models.ForeignKey(blank=True, help_text='Lens mount used by this projector', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Mount'),
        ),
        migrations.AlterField(
            model_name='projector',
            name='negative_size',
            field=models.ForeignKey(blank=True, help_text='Largest negative size this projector can accept', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.NegativeSize'),
        ),
        migrations.AlterField(
            model_name='projector',
            name='own',
            field=models.BooleanField(blank=True, help_text='Whether we currently own this projector', null=True),
        ),
        migrations.AlterField(
            model_name='repair',
            name='camera',
            field=models.ForeignKey(blank=True, help_text='Camera that was repaired', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Camera'),
        ),
        migrations.AlterField(
            model_name='repair',
            name='date',
            field=models.DateField(blank=True, help_text='The date of the repair', null=True),
        ),
        migrations.AlterField(
            model_name='repair',
            name='description',
            field=models.CharField(blank=True, help_text='Longer description of the repair', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='repair',
            name='lens',
            field=models.ForeignKey(blank=True, help_text='Lens that was repaired', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Lens'),
        ),
        migrations.AlterField(
            model_name='repair',
            name='summary',
            field=models.CharField(help_text='Brief summary of the repair', max_length=100),
        ),
        migrations.AlterField(
            model_name='scan',
            name='colour',
            field=models.BooleanField(blank=True, help_text='Whether this is a colour image', null=True),
        ),
        migrations.AlterField(
            model_name='scan',
            name='date',
            field=models.DateField(blank=True, help_text='Date that this scan was made', null=True),
        ),
        migrations.AlterField(
            model_name='scan',
            name='filename',
            field=models.CharField(help_text='Filename of the scan', max_length=128),
        ),
        migrations.AlterField(
            model_name='scan',
            name='height',
            field=models.IntegerField(blank=True, help_text='Height of the scanned image in pixels', null=True),
        ),
        migrations.AlterField(
            model_name='scan',
            name='negative',
            field=models.ForeignKey(blank=True, help_text='Negative that this scan was made from', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Negative'),
        ),
        migrations.AlterField(
            model_name='scan',
            name='print',
            field=models.ForeignKey(blank=True, help_text='Print that this scan was made from', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Print'),
        ),
        migrations.AlterField(
            model_name='scan',
            name='width',
            field=models.IntegerField(blank=True, help_text='Width of the scanned image in pixels', null=True),
        ),
        migrations.AlterField(
            model_name='series',
            name='name',
            field=models.CharField(help_text='Name of this collection, e.g. Canon FD SLRs', max_length=45, unique=True),
        ),
        migrations.AlterField(
            model_name='shutterspeed',
            name='duration',
            field=models.DecimalField(decimal_places=5, help_text='Shutter speed in models.DecimalField notation, e.g. 0.04', max_digits=9),
        ),
        migrations.AlterField(
            model_name='shutterspeed',
            name='shutter_speed',
            field=models.CharField(help_text='Shutter speed in fractional notation, e.g. 1/250', max_length=10, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='shuttertype',
            name='type',
            field=models.CharField(help_text='Name of the shutter type (e.g. Focal plane, Leaf, etc)', max_length=45, unique=True),
        ),
        migrations.AlterField(
            model_name='teleconverter',
            name='elements',
            field=models.IntegerField(blank=True, help_text='Number of optical elements used in this teleconverter', null=True),
        ),
        migrations.AlterField(
            model_name='teleconverter',
            name='factor',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Magnification factor of this teleconverter (numerical part only, e.g. 1.4)', max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='teleconverter',
            name='groups',
            field=models.IntegerField(blank=True, help_text='Number of optical groups used in this teleconverter', null=True),
        ),
        migrations.AlterField(
            model_name='teleconverter',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this teleconverter', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='teleconverter',
            name='model',
            field=models.CharField(help_text='Model name of this teleconverter', max_length=45),
        ),
        migrations.AlterField(
            model_name='teleconverter',
            name='mount',
            field=models.ForeignKey(blank=True, help_text='Lens mount used by this teleconverter', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Mount'),
        ),
        migrations.AlterField(
            model_name='teleconverter',
            name='multicoated',
            field=models.BooleanField(blank=True, help_text='Whether this teleconverter is multi-coated', null=True),
        ),
        migrations.AlterField(
            model_name='toner',
            name='formulation',
            field=models.CharField(blank=True, help_text='Chemical formulation of the toner', max_length=45, null=True),
        ),
        migrations.AlterField(
            model_name='toner',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Manufacturer of this toner', null=True, on_delete=django.db.models.deletion.CASCADE, to='schema.Manufacturer'),
        ),
        migrations.AlterField(
            model_name='toner',
            name='name',
            field=models.CharField(help_text='Name of the toner', max_length=45),
        ),
        migrations.AlterField(
            model_name='toner',
            name='stock_dilution',
            field=models.CharField(blank=True, help_text='Stock dilution of the toner', max_length=10, null=True),
        ),
    ]
