---
name: Test

on:
  push:
  pull_request:
    branches: [master]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .yamllint.yml

  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install GDAL for Leaflet
        run: sudo apt update && sudo apt install libgdal-dev
      # install & configure poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      # load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .poetryvenv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      # install dependencies if cache does not exist
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Run pylint
        run: "poetry run pylint --rcfile=.pylintrc **/*.py"
      - name: Run Tests
        run: |
          poetry run python manage.py check
          poetry run python manage.py test
          poetry run python manage.py migrate

  build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      # install & configure poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      # load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .poetryvenv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      # install dependencies if cache does not exist
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Build Python package
        run: poetry build
      - name: Build Docker image
        uses: docker/build-push-action@v1
        with:
          repository: camerahub/camerahub
          tags: testing
          push: false
