---
name: Django CI

on:
  push:
  pull_request:
    branches: [master]
  release:
    types: [published]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v1
        with:
          config_file: .yamllint.yml

  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: dschep/install-poetry-action@v1.2
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install Dependencies
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Run pylint
        run: "poetry run pylint --rcfile=.pylintrc **/*.py"
      - name: Run Tests
        run: |
          poetry run python manage.py check
          poetry run python manage.py test
          poetry run python manage.py migrate

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: dschep/install-poetry-action@v1.2
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Build Python package
        run: |
          poetry install
          poetry build
      - name: Build Docker image
        uses: docker/build-push-action@v1
        with:
          repository: djjudas21/camerahub
          tags: testing
          push: false

  publish:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Install Poetry
        uses: dschep/install-poetry-action@v1.2
      - name: Check tag matches version
        run: "[[ $(poetry version | cut -d ' ' -f 2) == ${{ github.ref }} ]] && exit 0 || exit 1"
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Build Python package
        run: |
          poetry install
          poetry build
      - name: Publish to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: djjudas21
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: djjudas21/camerahub
          tag_with_ref: true
          tags: latest
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
